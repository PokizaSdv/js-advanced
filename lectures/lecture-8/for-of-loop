// For of loop
// Traditional For Loop
// Structure
// The regular "for" loop is a fundamental iteration mechanism in programming. Its syntax can be expressed as:

// for (initialization; condition; increment) {
//   // code block to be executed
// }
// Initialization: A variable is initiated, often to serve as the loop counter.
// Condition: The loop continues as long as this condition evaluates to true.
// Increment: The counter variable is modified at the conclusion of each iteration.
// Example with Array
// const numbers = [10, 20, 30, 40, 50];
// for (let i = 0; i < numbers.length; i++) {
//   console.log(numbers[i]);
// }
// // Output: 10, 20, 30, 40, 50
// Problems with Regular For Loop
// The traditional "for" loop, although powerful and flexible, harbors certain challenges:

// Verbosity: Writing the initialization, condition, and increment expressions can become verbose, particularly for simple iterations over arrays or strings.
// Error Prone: It's easy to make mistakes with indices, particularly if nested loops are involved.
// Readability: For developers unfamiliar with the codebase, understanding the loop's purpose can be more complex due to the manual handling of indices and conditions.
// For...of Loop
// The "for...of" loop was introduced to address these challenges by providing a more concise and readable way to iterate over elements of iterable objects like arrays and strings.

// Structure
// The syntax of the "for...of" loop is notably simpler:

// for (const element of iterable) {
//   // code block to be executed
// }
// Example with Array
// const numbers = [10, 20, 30, 40, 50];
// for (const number of numbers) {
//   console.log(number);
// }
// // Output: 10, 20, 30, 40, 50
// This code is shorter, more readable, and less prone to errors compared to using a traditional "for" loop.

// Example with String
// const string = 'Hello';
// for (const character of string) {
//   console.log(character);
// }
// // Output: H, e, l, l, o
// This example illustrates the simplicity of iterating over a string, character by character, using the "for...of" loop.

// Advantages of For...of Loop
// Conciseness: The syntax is more concise, and there's no need to manually handle indices or conditions.
// Readability: It offers better readability, as the intention of iterating over the elements is clear.
// Reduced Error: By eliminating manual index handling, the potential for mistakes is diminished.
// Conclusion
// The transition from the traditional "for" loop to the "for...of" loop in ECMAScript 6 represents a meaningful advancement in easing the process of iteration in programming. While the regular "for" loop is a powerful construct that provides fine-grained control over the iteration process, it can be cumbersome and error-prone, especially for simple iterations over arrays or strings.

// The "for...of" loop, on the other hand, provides a more intuitive and concise means of iteration, enhancing code readability and maintainability. By directly iterating over the elements of an array or the characters of a string, it abstracts the complexities involved in manual index management, thereby mitigating potential errors.

// Through the utilization of the "for...of" loop, developers can write more expressive, efficient, and robust code, particularly when dealing with common iterables like arrays and strings.
