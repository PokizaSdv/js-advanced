//   String, Array, Number
// JavaScript is a prototype-based language, and every object in JavaScript has a [[Prototype]] property that references its prototype object. This system enables sharing of properties and methods across instances of an object. In fact, built-in JavaScript objects like Array, String, and Number use prototypes to provide their default properties and methods.

// Array
// When we create an array in JavaScript, it's an instance of the Array object and inherits from Array.prototype.

// let arr = [1, 2, 3];
// console.log(arr instanceof  Array) // true
// In the code above, arr is an instance of Array, and inherits methods like push(), pop(), indexOf, and many others from Array.prototype.

// String
// Strings in JavaScript can be created either by using string literals or by using the String constructor.

// let str1 = "Hello, world!";
// let str2 = new String("Hello, world!");
// console.log(typeof str1); // 'string'
// console.log(typeof str2); // 'object'
// console.log(str1 instanceof String) // false
// console.log(str2 instanceof String) // true
// In both cases, the strings str1 and str2 can access methods like includes(), toUpperCase(), charCodeAt(), and many others from String.prototype. This is possible because JavaScript temporarily wraps string primitives(str1) in a String object, allowing them to access methods from String.prototype, and then automatically unwraps them back to primitives.

// Number
// Numbers in JavaScript can also be created as number literals or using the Number constructor:

// let num1 = 42;
// let num2 = new Number(42);
// console.log(typeof num1); // 'number'
// console.log(typeof num1); // 'object'
// console.log(num1 instanceof Number) // false
// console.log(num2 instanceof Number) // true
// The numbers num1 and num2 can access methods like toFixed(), toExponential(), and toPrecision() from Number.prototype.

// Adding Custom Methods to Prototypes
// We can add our own methods to these prototypes. For instance, let's add a toCapitalize method to String.prototype:

// String.prototype.toCapitalize = function() {
//   return this[0].toUpperCase() + this.slice(1);
// };

// let myStr1 = "world";
// let myStr2 = new String("world");
// console.log(myStr1.toCapitalize());  // "World"
// console.log(myStr2.toCapitalize());  // "World"
// In this example, we're adding a toCapitalize method to String.prototype. The this keyword inside the function refers to the string (either a string primitive or a String object) on which the toCapitalize method is being called.

// We can also add a method to Array.prototype:

// Array.prototype.sum = function() {
//   let total = 0;
//   for(let i = 0; i < this.length; i++) {
//     total += this[i];
//   }
//   return total;
// };

// console.log([1, 2, 3].sum());  // 6
// In the sum function, this refers to the array on which the sum method is being called.

// Now, let's add a method to Number.prototype:

// Number.prototype.isEven = function() {
//   return this % 2 === 0;
// };

// let num = 10;
// console.log(num.isEven()); // true

// let anotherNum = new Number(7);
// console.log(anotherNum.isEven()); // false
// In this example, we're adding an isEven method to Number.prototype. The this keyword inside the function refers to the number (either a number primitive or a Number object) on which the isEven method is being called.
