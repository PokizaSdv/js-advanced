// Method: .filter
// Intro
// The .filter method in JavaScript is part of the array prototype and is used to create a new array containing all elements that pass a specific test or condition set by a provided function. It enables the efficient selection of elements based on particular criteria, thus "filtering" the array.

// Structure
// The basic syntax of the .filter method is as follows:

const result = array.filter(function (element, index, array) {
    // return a condition
});
// The parameters in the callback function are:

// element: The current value being processed in the array.
// index: The index of the current value being processed in the array (optional).
// array: The array that .filter was called upon (optional).
// Functionality
// The .filter method executes the provided function for each element in the array. If the function returns a truthy value for a given element, that element is included in the new array. If the function returns a falsy value, the element is excluded.

// Examples
// Filtering Even Numbers
// Here's an example that filters even numbers from an array:

const numbers = [1, 2, 3, 4, 5, 6];
const evenNumbers = numbers.filter(function (number) {
    return number % 2 === 0;
});
console.log(evenNumbers); // Output: [2, 4, 6]
// Here's an example that filters even numbers at even indecies from an array:

const array = [10, 15, 20, 25, 30];
const evenIndexedNumbers = array.filter(function (element, index, array) {
    return index % 2 === 0;
});
console.log(evenIndexedNumbers); // Output: [10, 20, 30]
// Considerations
// Immutable: The .filter method does not modify the original array; instead, it creates a new array.
// Chainable: Since .filter returns a new array, you can chain other array methods onto it.
// Empty Arrays: If no elements meet the criteria, an empty array is returned.
// 5Comparison with Other Methods
// Unlike .map, which transforms every element in an array, or .some and .every, which test conditions, .filter selectively constructs a new array based on a condition.

// Conclusion
// The .filter method is a powerful and expressive tool for creating a new array from an existing one, based on specific criteria. By handling the loop logic internally and returning a new array, it helps to write clean and maintainable code.

// Its ability to work seamlessly with different data types and the possibility to chain with other array methods make it an essential part of modern JavaScript programming. Understanding its structure, behavior, and underlying mechanics allows developers to use this method effectively to craft elegant and efficient solutions.
