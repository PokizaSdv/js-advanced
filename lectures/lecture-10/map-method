// Method: .map
// Intro
// The .map method is an essential part of JavaScript for working with arrays. It's used to create a new array by applying a function to every element of the existing array. Let's delve into an in-depth explanation of .map by looking at its basic structure, functionality, and various examples, including a problem-solving approach that demonstrates the refactoring from a traditional loop to using .map.

// The .map method creates a new array by calling a provided function on every element in the calling array, without altering the original array.
// Structure
// The syntax for the .map method is as follows:

const newArray = array.map(function (element, index, array) {
    // return new value
});
// The parameters in the callback function are:

// element: The current value being processed in the array.
// index: The index of the current value being processed in the array (optional).
// array: The array that .map was called upon (optional).
// Examples
// Basic Example
// Suppose you have an array of numbers, and you want to double each number. You can achieve this with .map:

const numbers = [1, 2, 3];
const doubled = numbers.map(function (number) {
    return number * 2;
});
console.log(doubled); // Output: [2, 4, 6]
// Using Element, Index, and Array
// Here's an example that utilizes all three parameters of the callback function:

const fruits = ["apple", "banana", "cherry"];
const mappedFruits = fruits.map(function (fruit, index, array) {
    return `${fruit} (${index + 1} of ${array.length})`;
});
console.log(mappedFruits);
// Output: ['apple (1 of 3)', 'banana (2 of 3)', 'cherry (3 of 3)']
// Refactoring from a Traditional Loop
// Problem Statement
// You have an array of grades, and you want to increase each grade by 10%. Here's a solution using a for loop:

const grades = [60, 70, 80];
const increasedGrades = [];
for (let i = 0; i < grades.length; i++) {
    increasedGrades[i] = grades[i] * 1.1;
}
console.log(increasedGrades); // Output: [66, 77, 88]
// Refactoring with .map
// The same problem can be solved using the .map method, making the code more concise:

const grades1 = [60, 70, 80];
const increasedGrades1 = grades.map(function (grade) {
    return grade * 1.1;
});
console.log(increasedGrades); // Output: [66, 77, 88]

// Conclusion
// The .map method provides a clean, straightforward way to create a new array based on the existing one by applying a specific function to each element. It encapsulates the logic of iteration, allowing developers to focus on the transformation being applied to each element.

// Unlike some traditional loops, .map is expressive and helps in maintaining consistent code when working with arrays. By understanding its callback function, including the parameters for the current element, index, and array itself, one can utilize .map to write more concise and readable code.

// While avoiding technical jargon related to functional programming, it's essential to recognize that .map offers a pattern that many developers find beneficial for transforming data in arrays. Its applicability ranges from simple transformations to more complex data manipulation, making it a valuable tool in modern JavaScript programming.
